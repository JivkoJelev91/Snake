{"version":3,"sources":["Utils.js","Snake.js","Food.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["getRandomCoordinates","Math","floor","random","directions","38","40","37","39","initialState","food","speed","direction","snakeDots","React","memo","snakeColor","map","dot","i","style","left","top","background","className","key","foodColor","gameSize","showResult","useState","setSnakeDots","setFood","setSpeed","setDirection","useEffect","interval","setInterval","moveSnake","document","addEventListener","onKeyDown","clearInterval","removeEventListener","reset","useCallback","onGameOver","alert","length","e","window","event","keyCode","dots","head","push","shift","outOfBorders","grow","newSnake","unshift","increaseSpeed","eat","collapse","snake","pop","forEach","App","width","height","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b40fc1bc.chunk.js","sourcesContent":["export const getRandomCoordinates = () => {\r\n    const [min, max] = [1, 98] // percents\r\n    const x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\r\n    const y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\r\n    return [x,y]\r\n};\r\n\r\nexport const directions = {\r\n    38: 'UP',\r\n    40: 'DOWN',\r\n    37: 'LEFT',\r\n    39: 'RIGHT'\r\n};\r\n\r\nexport const initialState = {\r\n    food: getRandomCoordinates(),\r\n    speed: 200,\r\n    direction: 'RIGHT',\r\n    snakeDots: [\r\n      [0,0],\r\n      [2,0]\r\n    ]\r\n};","import React from 'react';\r\n\r\nconst Snake = ({snakeDots, snakeColor}) => {\r\n    return (\r\n        snakeDots.map((dot, i) => {\r\n\r\n            const style = {\r\n                left: `${dot[0]}%`, \r\n                top: `${dot[1]}%`,\r\n                background: snakeColor || '#000',\r\n            };\r\n\r\n            return (\r\n                <div className=\"snakeDot\" key={i} style={style} />\r\n            )\r\n        })\r\n    );\r\n}\r\n\r\nexport default React.memo(Snake);","import React from 'react';\r\n\r\nconst Food = ({ food, foodColor }) => {\r\n    const style = {\r\n        left: `${food[0]}%`,\r\n        top: `${food[1]}%`, \r\n        background: foodColor || '#DC143C',\r\n    };\r\n\r\n    return (\r\n        <div className=\"snakeFood\" style={style} />\r\n    );\r\n}\r\n\r\nexport default React.memo(Food);","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { initialState, getRandomCoordinates, directions } from './Utils';\r\nimport Snake from './Snake';\r\nimport Food from './Food';\r\n\r\nconst Game = ({ gameSize, snakeColor, foodColor, showResult }) => {\r\n  const [snakeDots, setSnakeDots] = useState(initialState.snakeDots);\r\n  const [food, setFood] = useState(initialState.food);\r\n  const [speed, setSpeed] = useState(initialState.speed);\r\n  const [direction, setDirection] = useState(initialState.direction);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(moveSnake, speed)\r\n    document.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      clearInterval(interval);\r\n      document.removeEventListener('keydown', onKeyDown);\r\n    }\r\n  });\r\n\r\n  const reset = useCallback(() => {\r\n    setSnakeDots(initialState.snakeDots);\r\n    setFood(initialState.food);\r\n    setSpeed(initialState.speed);\r\n    setDirection(initialState.direction);\r\n  }, [])\r\n\r\n  const onGameOver = useCallback(() => {\r\n    alert(`Game Over! Snake length is ${snakeDots.length}`);\r\n    reset();\r\n    return;\r\n  }, [snakeDots.length, reset])\r\n\r\n  const onKeyDown = useCallback((e) => {\r\n    e = e || window.event;\r\n    setDirection(directions[e.keyCode])\r\n  },[]);\r\n\r\n  const moveSnake = useCallback(() => {\r\n    const dots = [...snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    setSnakeDots(dots);\r\n  }, [direction, snakeDots])\r\n\r\n  const outOfBorders = useCallback(() => {\r\n    const head = snakeDots[snakeDots.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      onGameOver();\r\n    }\r\n  }, [onGameOver, snakeDots])\r\n\r\n  const grow = useCallback(() => {\r\n    const newSnake = [...snakeDots];\r\n    newSnake.unshift([]);\r\n    setSnakeDots(newSnake);\r\n  }, [snakeDots])\r\n\r\n  const increaseSpeed = useCallback(() => {\r\n    if (speed > 10) {\r\n      setSpeed(speed - 10);\r\n    }\r\n  }, [speed])\r\n\r\n  const eat = useCallback(() => {\r\n    const head = snakeDots[snakeDots.length - 1];\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      setFood(getRandomCoordinates())\r\n      grow();\r\n      increaseSpeed();\r\n    }\r\n  }, [grow, food, increaseSpeed, snakeDots])\r\n\r\n  const collapse = useCallback(() => {\r\n    const snake = [...snakeDots];\r\n    const head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach(dot => head[0] === dot[0] && head[1] === dot[1] && onGameOver());\r\n  }, [onGameOver, snakeDots])\r\n\r\n  useEffect(() => {\r\n    outOfBorders();\r\n    collapse();\r\n    eat();\r\n  }, [outOfBorders, collapse, eat, snakeDots]);\r\n\r\n  return (\r\n    <div className=\"gameArea\" style={gameSize}>\r\n      <Snake snakeDots={snakeDots} snakeColor={snakeColor} />\r\n      <Food food={food} foodColor={foodColor} />\r\n      {showResult &&\r\n        <div className='result'>\r\n          {`Snake length is ${snakeDots.length}`}\r\n        </div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Game);","import React from 'react';\r\nimport Game from './Game';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Game\r\n      gameSize={{\r\n        width: '600px',\r\n        height: '600px'\r\n      }}\r\n      snakeColor={'#000'}\r\n      foodColor={'#DC143C'}\r\n      showResult={true}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}